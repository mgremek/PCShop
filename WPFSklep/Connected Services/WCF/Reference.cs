//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFSklep.WCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.IProdukty")]
    public interface IProdukty {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetProdukty", ReplyAction="http://tempuri.org/IProdukty/GetProduktyResponse")]
        ProduktyService.Products[] GetProdukty(int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetProdukty", ReplyAction="http://tempuri.org/IProdukty/GetProduktyResponse")]
        System.Threading.Tasks.Task<ProduktyService.Products[]> GetProduktyAsync(int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetManufacturers", ReplyAction="http://tempuri.org/IProdukty/GetManufacturersResponse")]
        ProduktyService.Manufacturers[] GetManufacturers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetManufacturers", ReplyAction="http://tempuri.org/IProdukty/GetManufacturersResponse")]
        System.Threading.Tasks.Task<ProduktyService.Manufacturers[]> GetManufacturersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetSubcategory", ReplyAction="http://tempuri.org/IProdukty/GetSubcategoryResponse")]
        ProduktyService.SubCategory[] GetSubcategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetSubcategory", ReplyAction="http://tempuri.org/IProdukty/GetSubcategoryResponse")]
        System.Threading.Tasks.Task<ProduktyService.SubCategory[]> GetSubcategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/IsLogged", ReplyAction="http://tempuri.org/IProdukty/IsLoggedResponse")]
        bool IsLogged(string pass, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/IsLogged", ReplyAction="http://tempuri.org/IProdukty/IsLoggedResponse")]
        System.Threading.Tasks.Task<bool> IsLoggedAsync(string pass, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetXml", ReplyAction="http://tempuri.org/IProdukty/GetXmlResponse")]
        string GetXml(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProdukty/GetXml", ReplyAction="http://tempuri.org/IProdukty/GetXmlResponse")]
        System.Threading.Tasks.Task<string> GetXmlAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProduktyChannel : WPFSklep.WCF.IProdukty, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProduktyClient : System.ServiceModel.ClientBase<WPFSklep.WCF.IProdukty>, WPFSklep.WCF.IProdukty {
        
        public ProduktyClient() {
        }
        
        public ProduktyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProduktyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProduktyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProduktyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ProduktyService.Products[] GetProdukty(int subId) {
            return base.Channel.GetProdukty(subId);
        }
        
        public System.Threading.Tasks.Task<ProduktyService.Products[]> GetProduktyAsync(int subId) {
            return base.Channel.GetProduktyAsync(subId);
        }
        
        public ProduktyService.Manufacturers[] GetManufacturers() {
            return base.Channel.GetManufacturers();
        }
        
        public System.Threading.Tasks.Task<ProduktyService.Manufacturers[]> GetManufacturersAsync() {
            return base.Channel.GetManufacturersAsync();
        }
        
        public ProduktyService.SubCategory[] GetSubcategory() {
            return base.Channel.GetSubcategory();
        }
        
        public System.Threading.Tasks.Task<ProduktyService.SubCategory[]> GetSubcategoryAsync() {
            return base.Channel.GetSubcategoryAsync();
        }
        
        public bool IsLogged(string pass, string login) {
            return base.Channel.IsLogged(pass, login);
        }
        
        public System.Threading.Tasks.Task<bool> IsLoggedAsync(string pass, string login) {
            return base.Channel.IsLoggedAsync(pass, login);
        }
        
        public string GetXml(int id) {
            return base.Channel.GetXml(id);
        }
        
        public System.Threading.Tasks.Task<string> GetXmlAsync(int id) {
            return base.Channel.GetXmlAsync(id);
        }
    }
}
